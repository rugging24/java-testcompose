/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.theitshop;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.theitshop.container.BaseContainer;
import org.apache.hc.client5.http.fluent.Content;
import org.apache.hc.client5.http.fluent.Request;
import org.apache.hc.core5.http.ContentType;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class RunContainerTest {
    @Test void appHasAGreeting() throws Exception {
        final String appContainerName = "application";
        final int exposedContainerPort = 8000;
        RunContainers runContainers = new RunContainers();
        runContainers.startTestContainers();
        BaseContainer applicationContainer = runContainers.getBaseContainerMap().get(appContainerName);
        Map<String, Object> kafkaData = Map.of(
                "name", "TestName",
                "Age", 25,
                "Address", "Test Address 1"
        );
        Map<String, Object> kafkaGrpId = Map.of(
                "group_id", "test-grp"
        );

        ObjectMapper mapper = new ObjectMapper();
        String baseUrl = applicationContainer.getRunningContainer().getContainer().getHost() + ":" +
                applicationContainer.getRunningContainer().getContainer().getMappedPort(exposedContainerPort);

        Content ping = Request.get("http://" + baseUrl + "/ping")
                        .execute()
                        .returnContent();

        assertEquals(Map.of("status", "pong"), mapper.readValue(ping.asString(), Map.class));

        Content KafkaProducer = Request.post("http://" + baseUrl + "/version/produce")
                        .bodyString(mapper.writeValueAsString(kafkaData), ContentType.APPLICATION_JSON)
                        .execute()
                        .returnContent();

        assertEquals(Map.of("status", "success"), mapper.readValue(KafkaProducer.asString(), Map.class));

        Content kafkaConsumer = Request.post("http://" + baseUrl + "/version/consume")
                .bodyString(mapper.writeValueAsString(kafkaGrpId), ContentType.APPLICATION_JSON)
                .execute()
                .returnContent();

        assertEquals(kafkaData, mapper.readValue(kafkaConsumer.asString(), Map.class));

        runContainers.stopTestContainers();
        assertEquals(0, runContainers.getBaseContainerMap().size());
    }
}
