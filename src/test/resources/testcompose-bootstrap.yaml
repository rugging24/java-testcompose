services:
  - name: database
    image: "postgres:13"
    command: ""
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres_db
      POSTGRES_PASSWORD: password
    exposed_ports:
      - 5432
    log_wait_parameters:
      log_line_regex: ".*database system is ready to accept connections.*"
      log_line_regex_occurrence: 1
  - name: application
    image: "python:3.9"
    command: "/bin/bash -x /run_app.sh"
    environment:
      DB_URL: "${{database.postgres_user}}:${{database.postgres_password}}@${{database.container_hostname}}:5432/${{database.postgres_db}}"
      KAFKA_BOOTSTRAP_SERVERS: "${{kafka.container_hostname}}:9092"
      KAFKA_OFFSET_RESET: "earliest"
      KAFKA_TOPIC: "test_kafka_topic"
    exposed_ports:
      - 8000
    volumes:
      - host: "docker-test-files/run_app.sh"
        container: "/run_app.sh"
        mode: "ro"
        source: "resources"
      - host: "docker-test-files/app.py"
        container: "/app.py"
        mode: "ro"
        source: "resources"
    log_wait_parameters:
      log_line_regex: ".*Application startup complete.*"
      log_line_regex_occurrence: 1
    http_wait_parameters:
      http_port: "8000"
      response_status_code: 200
      end_point: "/ping"
    depends_on:
      - database
      - kafka
  - name: zookeeper
    image: confluentinc/cp-zookeeper:6.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    log_wait_parameters:
      log_line_regex: ".*Started AdminServer on address.*"
      log_line_regex_occurrence: 1
    exposed_ports:
      - 2181
  - name: kafka
    image: confluentinc/cp-kafka:6.2.1
    test_containers_module:
      module_name: KafkaContainer
      module_parameters:
        zookeeper:
          external: true
          connection_string: "${{zookeeper.container_hostname}}:${{zookeeper.zookeeper_client_port}}"
    environment: # optional => uses the default env variables from the original module
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    exposed_ports:
      - 9093
    depends_on:
      - zookeeper
#    exec_command_after_container_startup:
#      - name: change_kafka_advertised_listener_config
#        command: >-
#          kafka-configs --alter
#          --bootstrap-server=PLAINTEXT://${{self.container_host_alias}}:9092
#          --entity-type=brokers
#          --entity-name=${{env.KAFKA_BROKER_ID}}
#          --add-config advertised.listeners=["BROKER://${{self.container_host_alias}}:9092","PLAINTEXT://${{self.container_host_address}}:${{self.external_port_9093}}"]

# Add memory settings per container
# "PLAINTEXT://${{self.container_hostname}}:29092,CONNECTIONS_FROM_HOST://localhost:${{self.external_port_9092}}"
# database.container_hostname -> hostname -> container name
# self.container_hostname -> hostname -> container name
# database.external_port_5432 -> mapped host port
# self.hostport_9092 -> mapped host port for the current container. Container must already be running to obtain this
# container external host -> String ipAddress = container.getHost();
# container external port -> container.getMappedPort(8080);
# Container Host address -> container_host_address -> DockerClientFactory.instance().dockerHostIpAddress();
# "PLAINTEXT://${{self.container_hostname}}:29092, CONNECTIONS_FROM_HOST://${{container_host_address}}:${{self.external_port_9092}}"
# ${{self.container_network_alias}}
# "PLAINTEXT://${{self.container_hostname}}:29092"